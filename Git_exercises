1. Create a directory where you'll be keeping all your projects (~/Projects, ~/dev, ~/coding or something like this)
-
mkdir Projects
cd Projects

2. Create a directory "command-line" in your projects folder	
-
mkdir command-line

3. Initialise a git repository inside it
-
git init

4. Create a README file with the following content: "This is a list of some of the most useful shell commands"	
-
echo "This is a list of some of the most useful shell commands" > README

5. Add it to the repo and commit it	
-
git add README
git commit -m "Initial commit"

6. Create a repo with the same name on Github	
-
green button: New Repository

7. Create a remote in your local repo called "origin" pointing to your Github repo	
-
git remote add origin git@github.com:sitypop/command-line.git

8. Verify that the remote actually exists and points to the right location
-
git remote -v

9. Push local changes to Github	
-
git push -u origin

10. Verify that you can now see your repository on Github (and note how Github displays your README file by default as the project description)

11. Now create a file called "mv" in your local repo. Commit it locally and push the changes to Github.
-
touch mv
git add mv
git commit -m "Second commit"
git push

12. Go to Github and find that file there. Edit it by putting the description of the "mv" shell command inside, in your own words. Don't copy the man page, just write what you know about the "mv" command. Commit the changes on Github.	
-
moves a file from one directory to another or can rename a file

13. Pull the changes from Github. Cat the file locally to verify that you pulled the change, so the file is not empty anymore.
-
cat mv

14. Do the same for commands "cp", "grep", "wc" and "ps". Use meaningful commit messages that describe well what you are doing.
-
touch cp
git add cp
git commit -m "Adding cp"

touch grep
git add mv
git commit -m "Adding grep"

touch wc
git add wc
git commit -m "Adding wc"

touch ps
git add ps
git commit -m "Adding ps"

git push

cp: Copies a file.
grep: Finds a specific word or phrase within a file.
wc: Displays 3 values: word, line and character count.
ps: Displays which processes you have launched.

15. You should have 11 commits by now: the initial one plus two commits (one local and one done on github) for every command. Verify this by viewing the commit log locally and on Github. Both logs should be in sync. Make sure they are in sync before proceeding to the next step!
-
git log
I only have 10 as I commited ps and wc together.

16. Delete the local repository by removing the folder
-
rm -rf command-line

17. Go to your repo on Github, copy the clone url and clone the repository locally, recreating it
-
git clone git@github.com:sitypop/command-line.git

18. Look at the list of commits. Check that there are no missing commits. Your repo should be in exactly in the same as it was before you deleted it.

19. Now delete one of the files in the local repository and commit the change.
-	
git rm cp
git commit -m "Deleting cp"

20. Push to Github and verify that you don't see the deleted file there.
-
git push